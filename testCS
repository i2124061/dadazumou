using UnityEngine;
using UnityEngine.Playables;
using UnityEngine.Timeline;
using System.Collections;
using System.Collections.Generic;

public class testCS : MonoBehaviour
{
    public PlayableDirector playableDirector; //TimelineのPlayableDirectorをアタッチ

    private float keyCount =0; //キー入力数
    private float previousCount =0;
    private int keiro = 0; //力士の動くルート
    private bool isPlus = false;
    private bool isMina = false;
    private bool isPlaying_A = false;
    private bool isPlaying_B = false;
    private bool syoki = false;

    private bool p= false;
    private bool m = false;
    public delegate void OnTestChange(bool myTest_1); //visualUmiCSへ
    public static event OnTestChange TestChanged;

    public delegate void OnSecondTestChange(bool myTest_2); //visualYamaCSへ
    public static event OnSecondTestChange SecondTestChanged;

    public delegate void OnResetTestChange(bool namiReset,bool isReset);
    public static event OnResetTestChange ResetTestChanged;

    public delegate void OnSyokiKanri(bool syoki);
    public static event OnSyokiKanri SyokiKanried;

    public delegate void OnIsPlus(bool isPlus);
    public static event OnIsPlus IsPlused;

    public delegate void OnIsMina(bool isMina);
    public static event OnIsMina IsMinaed;

    private bool myTest_1 = false;
    private bool myTest_2 = false;
    private bool namiReset = false;
    private bool isReset = false;

    public AudioSource audioSource;
    public AudioClip audioClip_1;
    public AudioClip audioClip_2;

    private int randomImg;
    private bool startGame = false;

    void Start()
    {
        keiro = Random.Range(1,3); //2つのルートからランダムで選ぶ
        Debug.Log("keiro: " + keiro);
        PlayTimelineForDuration(14f, 14f); //力士の初期位置
        playableDirector.Stop();
        audioSource = GetComponent<AudioSource>();
        audioSource.clip = audioClip_1;
        audioSource.Play();
    }

    //負けた力士のビジュアルを変えるため、負けた側に変数を送る////////////////////////////////
    private void OnEnable()
    {
        visualUmiCS.SendEventChecked_umi += SendEventCheck_umi;
        visualYamaCS.SendEventChecked_yama += SendEventCheck_yama;
        titleKanriCS.StartChanged += OnStartChange;
    }

    private void OnDisable()
    {
        visualUmiCS.SendEventChecked_umi -= SendEventCheck_umi;
        visualYamaCS.SendEventChecked_yama -= SendEventCheck_yama;
       titleKanriCS.StartChanged -= OnStartChange;
    }

    private void SendEventCheck_yama(int randomImg)
    {
        if(randomImg ==1) //変更されたビジュアルがタコの場合、特別ルートを指定
        {
            keiro =3;
        }else{
            keiro = Random.Range(1,3);
            Debug.Log("keiro: " + keiro);
        }
        Debug.Log("randomImg: " + randomImg);
    }

    private void SendEventCheck_umi(int randomImg)
    {
        if(randomImg ==1) //変更されたビジュアルがタコの場合、特別ルートを指定
        {
            keiro =4;
        }else{
            keiro = Random.Range(1,3);
        }
        Debug.Log("keiro: " + keiro);
        Debug.Log("randomImg: " + randomImg);
    }

    private void OnStartChange(bool isStart)
    {
        if(isStart)
        {
            startGame = true;
            IsMinaed?.Invoke(isMina);
            IsPlused?.Invoke(isPlus);

            if(audioSource.clip != audioClip_2)
            {
                audioSource.clip = audioClip_2;
                audioSource.Play();
            }
        }
        if(!isStart)
        {
            startGame = false;
            PlayTimelineForDuration(14f, 14f);
            keyCount =0;
            syoki = false;

            if(audioSource.clip != audioClip_1)
            {
                audioSource.clip = audioClip_1;
                audioSource.Play();
            }
        }
    }

    void Update()
    {
        if(startGame)
        {
            if (Input.GetKeyDown(KeyCode.A) && !isPlaying_A &&!isPlaying_B) 
            {
                keyCount ++;
                p= true;
                m = false;
            }
            if (Input.GetKeyDown(KeyCode.B) && !isPlaying_B && !isPlaying_A)
            {
                keyCount --;
                m = true;
                p = false;
            }
        }

        if(keyCount != previousCount)
        {
            if(!isPlaying_A) //アニメーション再生中はキー入力を受け付けない
            {
                if(keyCount ==1 && p && !syoki && keiro != 3)//力士or魚力士のルートで初期一からの移動
                {
                    p = !p;
                    isPlaying_A =true;
                    syoki = true;
                    previousCount = keyCount;
                    PlayTimelineForDuration(35f, 36f); 

                }else if(keyCount ==1 && p && !syoki && keiro == 3)//タコ力士のルートで初期一からの移動
                {
                    p = !p;
                    isPlaying_A =true;
                    syoki = true;
                    previousCount = keyCount; 
                    PlayTimelineForDuration(91f, 92f); 

                }

                if(keiro == 1 && syoki) //ノーマルルート１
                {
                    if(keyCount ==-4 && p)
                    {
                        p = !p;
                        isPlaying_A =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(0f, 1f); 

                    }else if(keyCount ==-3 && p)
                    {
                        p = !p;
                        isPlaying_A =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(1f, 2f); 

                    }else if(keyCount ==-2 && p)
                    {
                        p = !p;
                        isPlaying_A =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(2f, 3f); 

                    }else if(keyCount ==-1 && p)
                    {
                        p = !p;
                        isPlaying_A =true;
                        PlayTimelineForDuration(3f, 4f);

                    }else if(keyCount ==0 && p) 
                    {
                        p = !p;
                        isPlaying_A =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(4f, 5f); 

                    }else if(keyCount ==1 && p && syoki)
                    {
                        p = !p;
                        isPlaying_A =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(5f, 6f); 

                    }else if(keyCount ==2 && p)
                    {
                        p = !p;
                        isPlaying_A =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(6f, 7f);

                    }else if(keyCount ==3 && p)
                    {
                        p = !p;
                        isPlaying_A =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(7f, 8f);
  
                    }else if(keyCount ==4 && p)
                    {
                        p = !p;
                        isPlaying_A =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(8f, 9f);

                    }else if(keyCount ==5 && p)
                    {
                        p = !p;
                        isPlus = true;
                        IsPlused?.Invoke(isPlus);
                        isPlaying_A =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(9f, 10f);

                    }

                }else if(keiro == 2 && syoki) //ノーマルルート２
                {
                    if(keyCount ==-4 && p)
                    {
                        p = !p;
                        isPlaying_A =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(58f, 59f);

                    }else if(keyCount ==-3 && p)
                    {
                        p = !p;
                        isPlaying_A =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(59f, 60f); 

                    }else if(keyCount ==-2 && p)
                    {
                        p = !p;
                        isPlaying_A =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(60f, 61f); 

                    }else if(keyCount ==-1 && p)
                    {
                        p = !p;
                        isPlaying_A =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(61f, 62f);

                    }else if(keyCount ==0 && p)
                    {
                        p = !p;
                        isPlaying_A =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(62f, 63f); 

                    }else if(keyCount ==1 && p)
                    {
                        p = !p;
                        isPlaying_A =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(39f, 40f); 

                    }else if(keyCount ==2 && p)
                    {
                        p = !p;
                        isPlaying_A =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(40f, 41f);

                    }else if(keyCount ==3 && p)
                    {
                        p = !p;
                        isPlaying_A =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(41f, 42f);

                    }else if(keyCount ==4 && p)
                    {
                        p = !p;
                        isPlaying_A =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(42f, 43f);

                    }else if(keyCount ==5 && p)
                    {
                        p = !p;
                        isPlus = true;
                        IsPlused?.Invoke(isPlus);
                        isPlaying_A =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(43f, 44f);

                    }

                }else if(keiro ==3 && syoki) //タコ力士のルート
                {        
                    if(keyCount ==-3 && p)
                    {
                        p = !p;
                        isPlaying_A =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(79f, 80f); 

                    }else if(keyCount ==-2 && p)
                    {
                        p = !p;
                        isPlaying_A =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(80f, 81f); 

                    }else if(keyCount ==-1 && p)
                    {
                        p = !p;
                        isPlaying_A =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(81f, 82f);

                    }else if(keyCount ==0 && p) 
                    {
                        p = !p;
                        isPlaying_A =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(82f, 83f); 

                    }else if(keyCount ==1 && p && syoki)
                    {
                        p = !p;
                        isPlaying_A =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(83f, 84f); 

                    }else if(keyCount ==2 && p)
                    {
                        p = !p;
                        isPlaying_A =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(84f, 85f);

                    }else if(keyCount ==3 && p)
                    {
                        p = !p;
                        isPlaying_A =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(85f, 86f);

                    }else if(keyCount ==4 && p)
                    {
                        p = !p;
                        isPlaying_A =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(86f, 87f);

                    }else if(keyCount ==5 && p)
                    {
                        p = !p;
                        isPlus = true;
                        IsPlused?.Invoke(isPlus);
                        isPlaying_A =true;
                        previousCount = keyCount;
                        Reset(87f, 89f);
                    }
    
                }else if(keiro == 4 && syoki) //タコ力士のルート
                {        
                    if(keyCount ==-3 && p)
                    {
                        p = !p;
                        isPlaying_A =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(1f, 2f); 

                    }else if(keyCount ==-2 && p) 
                    {
                        p = !p;
                        isPlaying_A =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(2f, 3f); 

                    }else if(keyCount ==-1 && p)
                    {
                        p = !p;
                        isPlaying_A =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(3f, 4f); 

                    }else if(keyCount ==0 && p) 
                    {
                        p = !p;
                        isPlaying_A =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(4f, 5f); 

                    }else if(keyCount ==1 && p && syoki)
                    {
                        p = !p;
                        isPlaying_A =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(5f, 6f); 

                    }else if(keyCount ==2 && p)
                    {
                        p = !p;
                        isPlaying_A =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(6f, 7f);

                    }else if(keyCount ==3 && p)
                    {
                        p = !p;
                        isPlaying_A =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(7f, 8f);

                    }else if(keyCount ==4 && p)
                    {
                        p = !p;
                        isPlaying_A =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(8f, 9f);

                    }else if(keyCount ==5 && p)
                    {
                        p = !p;
                        isPlus = true;
                        IsPlused?.Invoke(isPlus);
                        isPlaying_A =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(9f, 10f);

                    }
                }
            }
            if(!isPlaying_B)
            {
                if(keyCount == -1 && m && !syoki && keiro != 4)
                {
                    m = !m;
                    isPlaying_B =true;
                    syoki = true;
                    previousCount = keyCount;
                    PlayTimelineForDuration(33f, 34f);
                }else if(keyCount == -1 && m && !syoki && keiro == 4)
                {
                    m = !m;
                    isPlaying_B =true;
                    syoki = true;
                    previousCount = keyCount; 
                    PlayTimelineForDuration(93f, 94f); 
                }

                if(keiro == 1 && syoki) //ノーマルルート
                {
                    if(keyCount ==-5 && m)
                    {
                        m = !m;
                        isPlaying_B =true;
                        isMina = true;
                        IsMinaed?.Invoke(isMina);
                        previousCount = keyCount;
                        PlayTimelineForDuration(24f, 25f);
        
                    }else if(keyCount ==-4 && m)
                    {
                        m = !m;
                        isPlaying_B =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(23f, 24f);

                    }else if(keyCount ==-3 && m)
                    {
                        m = !m;
                        isPlaying_B =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(22f, 23f);
        
                    }else if(keyCount ==-2 && m)
                    {
                        m = !m;
                        isPlaying_B =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(21f, 22f);
        
                    }else if(keyCount ==-1 && m && syoki)
                    {
                        m = !m;
                        isPlaying_B =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(20f, 21f);

                    }else if(keyCount ==0 && m)
                    {
                        m = !m;
                        isPlaying_B =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(19f, 20f);

                    }else if(keyCount == 1 && m)
                    {
                        m = !m;
                        isPlaying_B =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(18f, 19f);

                    }else if(keyCount == 2 && m)
                    {
                        m = !m;
                        isPlaying_B =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(17f, 18f);

                    }else if(keyCount == 3 && m)
                    {
                        m = !m;
                        isPlaying_B =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(16f, 17f);

                    }else if(keyCount == 4 && m)
                    {
                        m = !m;
                        isPlaying_B =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(15f, 16f);
    
                    }
                }else if(keiro == 2 && syoki) //ノーマルルート
                {
                    if(keyCount ==-5 && m)
                    {
                        m = !m;
                        isPlaying_B =true;
                        isMina = true;
                        IsMinaed?.Invoke(isMina);
                        previousCount = keyCount;
                        PlayTimelineForDuration(55f, 56f);

                    }else if(keyCount ==-4 && m)
                    {
                        m = !m;
                        isPlaying_B =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(54f, 55f);

                    }else if(keyCount ==-3 && m)
                    {
                        m = !m;
                        isPlaying_B =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(53f, 54f);

                    }else if(keyCount ==-2 && m)
                    {
                        m = !m;
                        isPlaying_B =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(52f, 53f);

                    }else if(keyCount ==-1 && m && syoki)
                    {
                        m = !m;
                        isPlaying_B =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(51f, 52f);

                    }else if(keyCount ==0 && m)
                    {
                        m = !m;
                        isPlaying_B =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(50f, 51f);

                    }else if(keyCount == 1 && m)
                    {
                        m = !m;
                        isPlaying_B =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(49f, 50f);

                    }else if(keyCount == 2 && m)
                    {
                        m = !m;
                        isPlaying_B =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(48f, 49f);

                    }else if(keyCount == 3 && m)
                    {
                        m = !m;
                        isPlaying_B =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(47f, 48f);
        
                    }else if(keyCount == 4 && m)
                    {
                        m = !m;
                        isPlaying_B =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(15f, 16f);
                    }
                }else if(keiro == 3 && syoki) //タコ力士のルート
                {
                    if(keyCount ==-5 && m)
                    {
                        m = !m;
                        isPlaying_B =true;
                        isMina = true;
                        IsMinaed?.Invoke(isMina);
                        previousCount = keyCount;
                        PlayTimelineForDuration(24f, 25f);
        
                    }else if(keyCount ==-4 && m)
                    {
                        m = !m;
                        isPlaying_B =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(23f, 24f);

                    }else if(keyCount ==-3 && m)
                    {
                        m = !m;
                        isPlaying_B =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(22f, 23f);
        
                    }else if(keyCount ==-2 && m)
                    {
                        m = !m;
                        isPlaying_B =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(21f, 22f);
        
                    }else if(keyCount ==-1 && m && syoki)
                    {
                        m = !m;
                        isPlaying_B =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(20f, 21f);

                    }else if(keyCount ==0 && m)
                    {
                        m = !m;
                        isPlaying_B =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(19f, 20f);

                    }else if(keyCount == 1 && m)
                    {
                        m = !m;
                        isPlaying_B =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(18f, 19f);

                    }else if(keyCount == 2 && m)
                    {
                        m = !m;
                        isPlaying_B =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(17f, 18f);

                    }else if(keyCount == 3 && m)
                    {
                        m = !m;
                        isPlaying_B =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(16f, 17f);

                    }
                }else if(keiro == 4 && syoki) //タコ力士のルート
                {
                    if(keyCount ==-5 && m)
                    {
                        m = !m;
                        isPlaying_B =true;
                        isMina = true;
                        IsMinaed?.Invoke(isMina);
                        previousCount = keyCount;
                        Reset(74f, 76f);
        
                    }else if(keyCount ==-4 && m)
                    {
                        m = !m;
                        isPlaying_B =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(73f, 74f);

                    }else if(keyCount ==-3 && m)
                    {
                        m = !m;
                        isPlaying_B =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(72f, 73f);
        
                    }else if(keyCount ==-2 && m)
                    {
                        m = !m;
                        isPlaying_B =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(71f, 72f);
        
                    }else if(keyCount ==-1 && m && syoki)
                    {
                        m = !m;
                        isPlaying_B =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(70f, 71f);

                    }else if(keyCount ==0 && m)
                    {
                        m = !m;
                        isPlaying_B =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(69f, 70f);

                    }else if(keyCount == 1 && m)
                    {
                        m = !m;
                        isPlaying_B =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(68f, 69f);

                    }else if(keyCount == 2 && m)
                    {
                        m = !m;
                        isPlaying_B =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(67f, 68f);

                    }else if(keyCount == 3 && m)
                    {
                        m = !m;
                        isPlaying_B =true;
                        previousCount = keyCount;
                        PlayTimelineForDuration(66f, 67f);

                    }
                }
            }
        }

        if(!isPlaying_A && isPlus)
        {
            if(keiro == 1 || keiro ==4)
            {
                p = !p;
                isPlaying_A =true;
                previousCount = keyCount;
                Reset(10f, 12f);
            }else if(keiro == 2)
            {
                p = !p;
                isPlaying_A =true;
                previousCount = keyCount;
                Reset(44f, 46f);
            }
        }

        if(!isPlaying_B && isMina)
        {   
            if(keiro == 1 || keiro ==3)
            {
                m = !m;
                isPlaying_B =true;
                previousCount = keyCount;
                Reset(25f, 27f);
            }else if(keiro == 2)
            {
                m = !m;
                isPlaying_B =true;
                previousCount = keyCount;
                Reset(56f, 57f);
            }
        }
    }


    void PlayTimelineForDuration(float startSeconds, float endSeconds)
    {
        playableDirector.time = startSeconds; // 再生を開始する時間を設定
        playableDirector.Play(); // Timelineの再生を開始

        // 指定した時間で再生を止める
        StartCoroutine(StopTimelineAfterDuration(endSeconds - startSeconds));
    }

    void Reset(float startSeconds_2,float endSeconds_2)
    {
        playableDirector.time = startSeconds_2;
        playableDirector.Play();

        StartCoroutine(StopTimelineAfterDuration_2(endSeconds_2 - startSeconds_2));
    }

    void Change(float startSeconds_3,float endSeconds_3)
    {
        playableDirector.time = startSeconds_3;
        playableDirector.Play();

        StartCoroutine(StopTimelineAfterDuration_3(endSeconds_3 - startSeconds_3));
    }

    IEnumerator StopTimelineAfterDuration(float duration)
    {
        yield return new WaitForSeconds(duration);
        playableDirector.Stop(); // Timelineの再生を停止
        isPlaying_A = false;
        isPlaying_B = false;
    }

    IEnumerator StopTimelineAfterDuration_2(float duration)
    {
        yield return new WaitForSeconds(duration);
        playableDirector.Stop(); // Timelineの再生を停止

        if(isPlus)
        {
            namiReset = true;
            myTest_1 = true;
            if(myTest_1)
            {
                TestChanged?.Invoke(myTest_1); //visualUmiCSへ
            }
            Change(12f,14f);
            if(namiReset)
            {
                ResetTestChanged?.Invoke(namiReset,isReset);
            }
        }else if(isMina)
        {
            namiReset = true;
            myTest_2 = true;
            if(myTest_2)
            {
                SecondTestChanged?.Invoke(myTest_2); //visualYamaCSへ
            }
            Change(27f,29f);
            if(namiReset)
            {
                ResetTestChanged?.Invoke(namiReset,isReset);
            }
        }
    }

    IEnumerator StopTimelineAfterDuration_3(float duration)
    {
        yield return new WaitForSeconds(duration);
        playableDirector.Stop(); // Timelineの再生を停止
        syoki = false;
        SyokiKanried?.Invoke(syoki);
        myTest_1 = false;
        myTest_2 = false;
        keyCount = 0;
        isMina = false;
        isPlus = false;
        isPlaying_A = false; //ここは最後にfalseに戻す
        isPlaying_B = false;
        namiReset = false;
        isReset = true;
        if(isReset)
        {
            ResetTestChanged?.Invoke(namiReset,isReset);
            isReset = false;
        }

    }
}
